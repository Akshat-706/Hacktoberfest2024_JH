class Solution {
    public int search(int[] nums, int target) {
        int k=findPivot(nums);
       if(k==-1)
       {
           return findTarget1(nums,target,0,nums.length-1);
       }
       else if(target==nums[k])
       {
           return k;
       }
       else if(target<nums[0])
       {
           return findTarget1(nums,target,k+1,nums.length-1);
       }
       
        return findTarget1(nums,target,0,k-1);
    }
    public static int findTarget1(int[] arr,int target,int start,int end)
    {
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]<target)
            {
                start=mid+1;
            }
            else if(arr[mid]>target)
            {
                end=mid-1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
    public static int findPivot(int[] arr)
    {
        int start=0;
        int end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(mid<end && arr[mid]>arr[mid+1])
            {
                return mid;
            }
            if(mid>start && arr[mid]<arr[mid-1])
            {
                return mid-1;
            }
            if(arr[mid]<=arr[start])
            {
                end=mid-1;
            }
            else
            {
                start=mid+1;
            }
        }
        return -1;
    }
}
